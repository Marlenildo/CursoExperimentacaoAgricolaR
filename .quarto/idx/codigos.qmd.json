{"title":"Exemplos de C√≥digos","markdown":{"yaml":{"title":"Exemplos de C√≥digos","author":"Marlenildo Melo","date":"2025-08-21","lang":"pt-BR","format":{"html":{"theme":"cosmo","include-in-header":[{"text":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n"}],"toc":true,"toc_float":{"collapsed":false,"smooth_scroll":true},"toc_depth":4,"number_sections":true}}},"headingText":"<i class=\"fas fa-code\"></i>  Exemplos de C√≥digos","headingAttr":{"id":"exemplos-de-c√≥digos","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n## üîπ M√≥dulo 1 ‚Äì Introdu√ß√£o ao R e Organiza√ß√£o de Dados\n\n### Aula 1 ‚Äì Instala√ß√£o e primeiros passos\n\n-   Instale o R e o RStudio em seu computador.\\\n\nO **R** √© o programa principal, ou seja, a linguagem de programa√ß√£o e o ambiente de c√°lculo.\\\n√â nele que todos os comandos s√£o processados e as an√°lises estat√≠sticas s√£o realizadas.\\\nPor isso, o primeiro passo √© instalar o R no computador.\\\nO download deve ser feito diretamente no site oficial do CRAN (Comprehensive R Archive Network):\n\n<i class=\"fa-brands fa-r-project\"></i> <https://cran.r-project.org/>\n\nAo abrir o link, basta escolher o sistema operacional do seu computador (Windows, macOS ou Linux) e seguir as instru√ß√µes de instala√ß√£o.\\\nCom isso, voc√™ j√° ter√° o R funcionando, embora a sua interface seja bastante simples e pouco intuitiva para quem est√° come√ßando.\n\n√â justamente nesse ponto que entra o **RStudio**.\\\nO RStudio n√£o √© um programa separado do R, mas sim uma **IDE (Integrated Development Environment)**, ou seja, um ambiente de desenvolvimento que facilita o uso do R.\\\nEle oferece uma interface gr√°fica amig√°vel, onde voc√™ pode escrever c√≥digos, visualizar gr√°ficos, organizar projetos e instalar pacotes com muito mais facilidade.\n\nNo entanto, √© fundamental compreender que o RStudio **n√£o funciona sozinho**.\\\nEle depende do R j√° instalado na m√°quina, pois √© o R quem executa de fato os c√°lculos.\\\nPor isso, a ordem correta √©: primeiro instalar o R e, em seguida, instalar o RStudio.\n\nO download do RStudio pode ser feito no site oficial da Posit (empresa respons√°vel pelo software):\n\nüëâ <https://posit.co/download/rstudio-desktop/>\n\nAo instalar os dois programas, voc√™ ter√° o **R** como motor de c√°lculo e o **RStudio** como painel de controle, trabalhando em conjunto.\\\nEssa combina√ß√£o √© a mais utilizada no mundo acad√™mico e profissional para an√°lises estat√≠sticas e ci√™ncia de dados.\n\n-   Conhe√ßa os principais pain√©is do RStudio:\n    -   *Console* (execu√ß√£o de comandos)\\\n    -   *Source* (script)\\\n    -   *Environment/History* (objetos)\\\n    -   *Plots/Packages/Help*\n\n**Verificando vers√£o do R**\n\n```{r}\n# Verificando vers√£o do R\nversion\n```\n\n**Citando o R**\n\n```{r}\n# Cita√ß√£o do R\ncitation()\n```\n\n**Opera√ß√µes simples**\n\n```{r}\n# Opera√ß√µes simples\n\n## Soma\n2 + 2\n\n## Subtra√ß√£o\n7 - 2\n\n## Mutiplica√ß√£o\n4 * 3\n\n## Divis√£o\n10 / 3\n\n## Raiz quadrada\nsqrt(25)\n```\n\n------------------------------------------------------------------------\n\n### Aula 2 ‚Äì Objetos no R\n\nNesta aula, aprendemos a criar e manipular objetos no R. Objetos s√£o vari√°veis que armazenam valores ou resultados de c√°lculos, permitindo que possamos reutiliz√°-los em outras opera√ß√µes.\n\nNo exemplo apresentado, criamos dois objetos num√©ricos:\n\n```{r}\n# Criando objetos\nx <- 5\ny <- 10\n```\n\nAqui, x recebe o valor 5 e y recebe o valor 10. Em seguida, criamos um terceiro objeto chamado soma, que armazena a soma de x e y:\n\n```{r}\nsoma <- x + y\nsoma\n```\n\nAo digitar apenas soma, o R retorna o valor armazenado neste objeto, que neste caso √© 15.\n\nEste exemplo ilustra a forma b√°sica de criar objetos no R e realizar opera√ß√µes simples com eles, fundamental para qualquer an√°lise de dados ou programa√ß√£o no software.\n\n------------------------------------------------------------------------\n\n### Aula 3 ‚Äì Pacotes\n\nNo R, os pacotes s√£o conjuntos de fun√ß√µes, dados e recursos que estendem as capacidades b√°sicas do software, permitindo realizar an√°lises mais complexas de forma pr√°tica e eficiente.\n\nNo exemplo abaixo, veja como instalar alguns pacotes importantes um de cada vez:\n\n```{r}\n#| message: false\n#| warning: false\n#| eval: false\n\n# Carregando pacotes\ninstall.packages(\"tidyverse\")   # Para manipula√ß√£o e visualiza√ß√£o de dados\ninstall.packages(\"dplyr\")   # Para manipula√ß√£o e visualiza√ß√£o de dados\ninstall.packages(\"readxl\")      # Para ler arquivos do Excel\ninstall.packages(\"ExpDes.pt\")   # Para planejamento e an√°lise de experimentos agr√≠colas\ninstall.packages(\"easyanova\")   # Para facilitar an√°lises de vari√¢ncia\ninstall.packages(\"rstatix\")     # Para estat√≠sticas descritivas e testes inferenciais\ninstall.packages(\"emmeans\")     # Para estat√≠sticas descritivas e testes inferenciais\n\n```\n\nOuse preferir pode instalar v√°rios de uma √∫nica vez:\n\n```{r}\n#| message: false\n#| warning: false\n#| eval: false\n\n# Carregando pacotes\ninstall.packages(\"tidyverse\", \"readxl\", \"ExpDes.pt\", \"easyanova\", \"rstatix\", \"emmeans\")\n\n```\n\nNo exemplo abaixo, carregamos alguns pacotes importantes:\n\n```{r}\n#| message: false\n#| warning: false\n\n# Carregando pacotes\n\n# ---------------------------\n# Pacotes para manipula√ß√£o e leitura de dados\n# ---------------------------\nlibrary(tidyverse)   # Inclui dplyr, ggplot2, readr, tidyr, etc.\nlibrary(dplyr)       # Manipula√ß√£o de dados\nlibrary(readxl)      # Para importar planilhas Excel\n\n# ---------------------------\n# Pacotes para an√°lise de experimentos\n# ---------------------------\nlibrary(ExpDes.pt)   # ANOVA para DIC, DBC, parcelas subdivididas etc.\nlibrary(easyanova)   # ANOVA e testes complementares de forma simplificada\n\n# ---------------------------\n# Pacotes para estat√≠stica e p√≥s-testes\n# ---------------------------\nlibrary(rstatix)     # Testes estat√≠sticos (normalidade, homogeneidade, etc.)\nlibrary(emmeans)     # M√©dias ajustadas e compara√ß√µes m√∫ltiplas\n```\n\n\n\n\n------------------------------------------------------------------------\n\n### Aula 4 - Organiza√ß√£o e Padroniza√ß√£o dos Dados\n\nUm dos passos mais importantes em qualquer an√°lise √© a **organiza√ß√£o adequada dos dados**. Dados desorganizados ou com nomes de vari√°veis inconsistentes podem dificultar o trabalho, aumentar a chance de erros e at√© inviabilizar o uso de fun√ß√µes em softwares estat√≠sticos como o R.\n\nVeja esse esse exmeplo de banco de dados (`dados_ruins_dic`) no Excel:\n\n```{r}\n#| include: false\n# Banco com nomes pouco apropriados (exemplo did√°tico)\ndados_ruins_dic <- data.frame(\n  `Tratamento (Aduba√ß√£o)` = rep(c(\"T1 - Testemunha\", \n                                  \"T2 - 50kg N\", \n                                  \"T3 - 100kg N\", \n                                  \"T4 - 150kg N\"), each = 5),\n  \"Repeti√ß√£o\" = rep(1:5, times = 4),\n  \"Altura da planta (cm)\" = c(\n    160, 165, 158, 162, 161,   # T1 (testemunha, mais baixo)\n    180, 185, 178, 182, 184,   # T2\n    200, 205, 198, 202, 201,   # T3\n    220, 225, 218, 222, 221    # T4 (maior aduba√ß√£o)\n  ),\n  \"Mat√©ria seca (g)\" = c(\n    280, 300, 290, 295, 285,   # T1\n    360, 370, 365, 368, 362,   # T2\n    450, 460, 455, 465, 458,   # T3\n    550, 560, 545, 555, 548    # T4\n  )\n)\n\n# Ajustando nomes das colunas para ficarem bonitos no Excel\ncolnames(dados_ruins_dic) <- c(\"Repeti√ß√£o\", \"Tratamento\", \"Altura da planta (cm)\", \"Mat√©ria seca (g)\")\n```\n\n\n```{r}\n#| echo: false\ndados_ruins_dic |> \n  kableExtra::kable() |> \n  kableExtra::kable_paper(html_font = \"Arial\")\n```\n\n\n**Import√¢ncia de bons t√≠tulos nas vari√°veis**\n\nNo R, os **nomes das colunas** (ou t√≠tulos das vari√°veis) devem seguir algumas boas pr√°ticas para facilitar a an√°lise:\n\n\n- **Padr√£o `snake_case`**: usar letras min√∫sculas e sublinhados para separar palavras, como `altura_planta_g`.\n- **Evitar espa√ßos**: em vez de `Altura da Planta`, utilizar `Altura_Planta`.  \n- **Usar unidades no nome da vari√°vel**: em vez de `Altura da Planta (cm)`, utilizar `Altura_Planta_cm`.  \n- **Usar letras min√∫sculas** (ou padr√£o definido): `altura_planta_cm`.  \n- **Evitar acentos e caracteres especiais**: em vez de `Mat√©ria seca (g)`, utilizar `materia_seca_g`.  \n- **Ser descritivo, mas n√£o excessivamente longo**: `peso_frutos` em vez de `pf_colheita_experimental_2024`.  \n\nEsses cuidados tornam o banco de dados mais **limpo, reprodut√≠vel e compat√≠vel com fun√ß√µes e pacotes do R**.\n\n**Como organizar os t√≠tulos**\n\n1. **Pode fazer manulamente no Excel**  \n   - Antes de importar o arquivo para o R, pode-se renomear diretamente no Excel.  \n   - Exemplo: renomear a coluna de `Massa seca total (g)` para `massa_seca_total_g`.  \n\n\n2. **Manualmente no R usando o pacote `dplyr`**  \n\nA fun√ß√£o `rename()` do pacote dplyr permite renomear manualmente colunas espec√≠ficas.\n\n\n```{r}\n# Renomear colunas espec√≠ficas\nlibrary(dplyr)\ndados_organizados_dplyr <- dados_ruins_dic |>\n  rename(\n    repeticao = `Repeti√ß√£o`,\n    tratamento = Tratamento,\n    altura_planta_cm = `Altura da planta (cm)`,\n    materia_seca_g = `Mat√©ria seca (g)`\n  )\n```\n\n\n```{r}\n#| echo: false\n# Ver banco de dados\ndados_organizados_dplyr |> \n  kableExtra::kable() |> \n  kableExtra::kable_paper(html_font = \"Arial\")\n```\n\n\n\nNomes antes:\n\n```{r}\n# Ver como eram\nnames(dados_ruins_dic)\n```\n\n\nNomes depois:\n\n```{r}\n# Ver como ficaram\nnames(dados_organizados_dplyr)\n```\n\n\n\n3. **Autom√°tico usando o pacote `janitor`**  \n   Existem pacotes que auxiliam na padroniza√ß√£o dos nomes de maneira autom√°tica:\n\n   - Pacote **`janitor`**: a fun√ß√£o `clean_names()` desse pacote converte automaticamente os t√≠tulos para um formato padr√£o (`snake_case`).  \n\nVeja o que acontece com esse banco de dados (`dados_ruins_dic`):\n\n```{r}\n# Corrigir nomes das colunas -> formato \"snake_case\"\ndados_organizados_janitor <- dados_ruins_dic |> \n  janitor::clean_names()\n```\n\n\n```{r}\n#| echo: false\n# Ver banco de dados\ndados_organizados_janitor |> \n  kableExtra::kable() |> \n  kableExtra::kable_paper(html_font = \"Arial\")\n```\n\nNomes antes:\n\n```{r}\n# Ver como eram\nnames(dados_ruins_dic)\n```\n\n\nNomes depois:\n\n```{r}\n# Ver como ficaram\nnames(dados_organizados_janitor)\n```\n\n------------------------------------------------------------------------\n\n### Aula 5 ‚Äì Importa√ß√£o de Dados\n\n**Importando dados**\n\nImportar dados para o R √© um passo fundamental para qualquer an√°lise. No R, √© poss√≠vel importar dados de diferentes formatos, o que √© essencial para iniciar qualquer an√°lise. O R permite ler diferentes formatos de arquivos, como CSV e Excel.\n\n```{r}\n\n# Importando CSV\n# dados_csv <- read.csv(\"meus_dados.csv\", sep = \";\", dec = \",\")\n# L√™ arquivos CSV, permitindo especificar o separador de colunas (sep) e o separador decimal (dec)\n\n# Importando Excel\n# dados_excel <- readxl::read_excel(\"meus_dados.xlsx\")\n# L√™ planilhas do Excel diretamente para o R\n\n# Importando arquivo de texto (TXT)\n# dados_txt <- read.table(\"meus_dados.txt\", header = TRUE, sep = \"\\t\", dec = \".\")\n# L√™ arquivos de texto, onde 'header = TRUE' indica que a primeira linha cont√©m os nomes das colunas,\n# 'sep = \"\\t\"' indica que as colunas s√£o separadas por tabula√ß√£o, e 'dec = \".\"' define o separador decimal\n\n```\n\n-   `read.csv()` l√™ arquivos no formato CSV (Comma-Separated Values), permitindo especificar o separador de colunas (sep) e o separador decimal (dec). √â indicado para planilhas exportadas como CSV ou dados gerados por outros programas.\n\n-   `read_excel()` (do pacote `readxl`) l√™ arquivos do Excel (.xls ou .xlsx) diretamente, mantendo nomes das colunas e tipos de dados corretamente, o que facilita a importa√ß√£o de planilhas complexas sem precisar convert√™-las.\n\n-   `read.table()` l√™ arquivos de texto simples (TXT ou outros delimitados), oferecendo flexibilidade para especificar se h√° cabe√ßalho (header = TRUE), o separador de colunas (sep) e o separador decimal (dec). √â ideal para arquivos de texto com diferentes formatos de separa√ß√£o.\n\n**Visualizando os dados**\n\nAp√≥s a importa√ß√£o, podemos visualizar os dados para verificar se foram carregados corretamente: Ap√≥s a importa√ß√£o, √© importante visualizar os dados para conferir se foram carregados corretamente. Para isso, podem ser usadas fun√ß√µes como:\n\n-   `head()` (exibe as primeiras linhas),\n-   `summary()` (mostra resumo estat√≠stico das vari√°veis),\n-   `str()` (mostra a estrutura do objeto) e\n-   `glimpse()` (exibe de forma compacta e leg√≠vel a estrutura e os tipos das vari√°veis).\n\n\n\n\n\n```{r}\n\n# head(dados_csv)    # Mostra as primeiras linhas do conjunto de dados\n# summary(dados_csv) # Mostra um resumo estat√≠stico das vari√°veis\n# str(dados_csv)     # Mostra a estrutura do objeto, incluindo tipos de vari√°veis e dimens√µes\n# glimpse(dados_csv)  # Mostra todas as vari√°veis, seus tipos e algumas observa√ß√µes de cada coluna\n\n```\n\n\n\n\n------------------------------------------------------------------------\n\n## üîπ M√≥dulo 2 ‚Äì Manipula√ß√£o e Explora√ß√£o de Dados\n\n### Aula 6 ‚Äì Tipos de Vari√°veis em R\n\n1.  **Vari√°veis num√©ricas**\n    -   **Cont√≠nuas (`numeric` / `dbl`)**: podem assumir qualquer valor dentro de um intervalo, incluindo decimais.\\\n        **Exemplo:** Produtividade (t/ha), √Årea (m¬≤)\n    -   **Discretas (`integer` / `int`)**: assumem apenas valores inteiros.\\\n        **Exemplo:** Parcela (identificador das parcelas)\n2.  **Vari√°veis categ√≥ricas (fatores) (`factor` / `fct`)**\n    -   Representam categorias ou grupos que o R reconhece para an√°lises estat√≠sticas.\\\n        **Exemplo:** Tratamento, Variedade\\\n    -   Ideais para an√°lise de vari√¢ncia e compara√ß√µes entre grupos\n3.  **Vari√°veis de texto (`character` / `chr`)**\n    -   Cont√™m informa√ß√µes textuais ou descritivas, que n√£o t√™m ordem ou significado num√©rico.\\\n        **Exemplo:** Local (Norte, Sul, Leste)\\\n    -   N√£o s√£o usadas diretamente em c√°lculos estat√≠sticos, mas servem para identificar ou agrupar dados\n4.  **Vari√°veis l√≥gicas (`logical` / `logi`)**\n    -   Assumem apenas dois valores: `TRUE` ou `FALSE`\\\n        **Exemplo:** Irrigado\\\n    -   √öteis para condi√ß√µes, filtros e an√°lises condicionais\n5.  **Outros tipos dispon√≠veis em R**\n    -   **Complexo (`complex` / sem abrevia√ß√£o comum)**: n√∫meros complexos, como `1+2i`\n    -   **Raw (`raw` / sem abrevia√ß√£o comum)**: representa dados brutos em bytes\\\n    -   **Date (`Date` / sem abrevia√ß√£o comum)**: datas no formato `\"YYYY-MM-DD\"`\\\n    -   **POSIXct / POSIXlt (`POSIXct` / `POSIXlt`)**: datas e horas com tempo\n    -   **Ordered factor (`ordered` / `ord`)**: fatores com ordem natural definida\n\n------------------------------------------------------------------------\n\nNeste exemplo, iremos **criar vari√°veis de diferentes tipos** em R ‚Äî num√©ricas cont√≠nuas, num√©ricas discretas e categ√≥ricas (fatores) ‚Äî e, em seguida, **identificar o tipo de cada vari√°vel** usando a fun√ß√£o `class()`.\n\nIsso nos permite compreender como o R armazena cada tipo de dado e como ele ser√° tratado em an√°lises estat√≠sticas.\n\n```{r}\n# Num√©rica cont√≠nua\nnum_cont <- 3.5      # numeric / dbl\nclass(num_cont) # Checando classes\n\n# Num√©rica discreta\nnum_disc <- 5L       # integer / int\nclass(num_disc)\n\n# Fator (categ√≥rica)\ntrat <- factor(c(\"T1\", \"T2\", \"T3\"))  # factor / fct\nclass(trat)\n\n# Ordered factor\nord_trat <- factor(c(\"Baixo\", \"M√©dio\", \"Alto\"), ordered = TRUE) # ordered / ord\nclass(ord_trat)\n\n# Character\nlocal <- c(\"Norte\", \"Sul\")  # character / chr\nclass(local)\n\n# L√≥gica\nirr <- c(TRUE, FALSE)       # logical / logi\nclass(irr)\n\n# Complexo\ncplx <- 1 + 2i              # complex\nclass(cplx)\n\n# Raw\nr <- charToRaw(\"A\")         # raw\nclass(r)\n\n# Datas\nd <- as.Date(\"2025-08-29\")  # Date\nclass(d)\n\ndt <- as.POSIXct(\"2025-08-29 12:00:00\") # POSIXct\nclass(dt)\n\n```\n\n<br>\n\n**Criando banco de dados fict√≠cio**\n\nNeste exemplo, iremos **criar um banco de dados fict√≠cio de um experimento agr√≠cola** com diferentes tipos de vari√°veis: num√©ricas (cont√≠nuas e discretas), categ√≥ricas, l√≥gicas e de texto.\n\nEm seguida, iremos **visualizar o banco de dados e identificar os tipos de vari√°veis**, para entender como o R armazena cada tipo e como podemos manipul√°-las em an√°lises estat√≠sticas.\n\n```{r}\n# Exemplo de banco de dados de experimento agr√≠cola\ndados_agro <- data.frame(\n  Parcela = 1:9,                               # Num√©rica discreta (identifica√ß√£o das parcelas)\n  Tratamento = factor(rep(c(\"T1\", \"T2\", \"T3\"), each = 3)), # Fator (categ√≥rica nominal)\n  Variedade = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\")), # Fator (categ√≥rica nominal)\n  Area = c(10, 10, 10, 12, 12, 12, 11, 11, 11),  # Num√©rica cont√≠nua (m¬≤)\n  Produtividade = c(30.5, 32.0, 31.0, 28.0, 29.5, 30.0, 33.0, 34.5, 32.5), # Num√©rica cont√≠nua (t/ha)\n  Irrigado = c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE),   # L√≥gica\n  Local = c(\"Norte\", \"Norte\", \"Norte\", \"Sul\", \"Sul\", \"Sul\", \"Leste\", \"Leste\", \"Leste\") # Texto (character)\n)\n```\n\n```{r}\n# Exemplo de banco de dados de experimento agr√≠cola\ndados_agro <- data.frame(\n  Parcela = 1:9,                               # Num√©rica discreta (identifica√ß√£o das parcelas)\n  Tratamento = rep(c(\"T1\", \"T2\", \"T3\"), each = 3), # Fator (categ√≥rica nominal)\n  Variedade = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\"), # Fator (categ√≥rica nominal)\n  Area = c(10, 10, 10, 12, 12, 12, 11, 11, 11),  # Num√©rica cont√≠nua (m¬≤)\n  Produtividade = c(30.5, 32.0, 31.0, 28.0, 29.5, 30.0, 33.0, 34.5, 32.5), # Num√©rica cont√≠nua (t/ha)\n  Irrigado = c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE),   # L√≥gica\n  Local = c(\"Norte\", \"Norte\", \"Norte\", \"Sul\", \"Sul\", \"Sul\", \"Leste\", \"Leste\", \"Leste\") # Texto (character)\n)\n```\n\n<br>\n\n**Fun√ß√µes para Visualiza√ß√£o e Estrutura de Dados no R**\n\n1.  **`head(dados_agro)`**\\\n    Mostra as **primeiras linhas** do conjunto de dados.\n    -   √ötil para ter uma **vis√£o r√°pida** do conte√∫do do banco, verificando se os dados foram importados corretamente.\\\n    -   Exemplo de sa√≠da:\n\n```{r}\nhead(dados_agro) \n```\n\n<br>\n\n2.  **`str(dados_agro)`**\n\nMostra a **estrutura do objeto**, permitindo entender rapidamente como os dados est√£o organizados no R.\n\nCom essa fun√ß√£o, √© poss√≠vel:\n\n-   Ver o **n√∫mero de observa√ß√µes** (linhas) e o **n√∫mero de vari√°veis** (colunas) do banco de dados, por exemplo, `9 obs. of 7 variables`.\\\n-   Identificar o **tipo de cada vari√°vel**, como `int` (inteiro), `num` (num√©rico cont√≠nuo), `Factor` (categ√≥rica), `logi` (l√≥gica/boolean) e `chr` (texto).\\\n-   Conferir **alguns valores iniciais de cada coluna**, ajudando a verificar se os dados foram importados corretamente e se os tipos est√£o adequados para an√°lise.\n\nEm resumo, `str()` √© uma fun√ß√£o essencial para **inspecionar rapidamente a estrutura e os tipos das vari√°veis**, antes de realizar qualquer an√°lise estat√≠stica ou manipula√ß√£o dos dados.\n\n```{r}\nstr(dados_agro)\n\n```\nObserve que **Tratamento** e **Variedade** aparecem como `character`, ou seja, texto.\\\nPara an√°lises estat√≠sticas, √© recomendado transformar essas vari√°veis em fatores.\n\n<br>\n\n3.  **`summary(dados_agro)`**\n\nMostra um **resumo estat√≠stico** das vari√°veis:\\\n- Para vari√°veis num√©ricas: m√≠nimo, m√°ximo, m√©dia, quartis\\\n- Para fatores: contagem de cada n√≠vel\\\n- Para l√≥gicas: contagem de `TRUE` e `FALSE`\\\n- √ötil para identificar tend√™ncias, valores extremos e distribui√ß√£o dos dados.\n\n```{r}\nsummary(dados_agro)\n\n```\n\nVeja novamente que **Tratamento** e **Variedade** aparecem como `character`.\\\nE n√£o s√£o reconhecidas como fatores.\\\nE n√£o √© poss√≠vel perceber quais s√£o os n√≠veis de cada vari√°vel categ√≥rica.\\\n\n**Convertendo variaveis categ√≥ricas em fatores**\n\n1. Pode-se convert√™-las em fatores usando a fun√ß√£o `as.factor()`:\n\n```{r}\ndados_agro$Tratamento <- as.factor(dados_agro$Tratamento)\ndados_agro$Variedade <- as.factor(dados_agro$Variedade)\n```\n\nAgora veja como fica a **estrutura** dos dados:\n\n```{r}\nstr(dados_agro)\n```\n\nAgora sim, Tratamento e variedade aparecem como `Factor` com 3 n√≠veis cada.\n\nveja como fica o **resumo estat√≠stico** dos dados:\n\n```{r}\nsummary(dados_agro)\n```\n\nAgora √© poss√≠vel ver a contagem de cada n√≠vel das vari√°veis categ√≥ricas.\nOu seja, s√£o 3 n√≠veis em cada vari√°vel (T1, T2, T3 para Tratamento e A, B, C para Variedade).\n\n2. Pode-se convert√™-las em fatores usando a fun√ß√£o `factor()`:\n\nTamb√©m d√° para criar o fator diretamente com a fun√ß√£o `factor()`, que √© mais flex√≠vel porque permite:\n\n- Definir os n√≠veis (`levels`)\n- Definir as etiquetas (`labels`)\n\nOu seja, permite controlar a ordem e o r√≥tulo dos n√≠veis (mais recomendado para ANOVA e modelos, pois evita ordem alfab√©tica indesejada).\n\n```{r}\n#| include: false\n#| echo: true\n\n\ndados_agro$Tratamento <- factor(\n  dados_agro$Tratamento,\n  levels = c(\"T1\", \"T2\", \"T3\"),                 # ordem dos n√≠veis\n  labels = c(\"Controle\", \"Adubo\", \"Bioestimulante\") # nomes leg√≠veis\n)\n\ndados_agro$Variedade <- factor(\n  dados_agro$Variedade,\n  levels = c(\"A\", \"B\", \"C\"),\n  labels = c(\"IPA 11\", \"Campo Lindo\", \"Mata-Hari\") # nomes reais das variedades\n)\n\nstr(dados_agro)\n```\n3. Pode-se ainda convert√™-las em fatores usando a fun√ß√£o `convert_as_factor()` do pacote {rstatix}:\n\nA fun√ß√£o `convert_as_factor()` pode converter uma ou v√°rias colunas ao mesmo tempo.\n\n```{r}\n#| warning: false\n#| include: false\n#| echo: true\n\nlibrary(rstatix)\n\ndados_agro <- dados_agro |> \n  convert_as_factor(Tratamento, Variedade)\n\n```\n\n\n\n<br>\n\n4.  **`glimpse(dados_agro)`** (do pacote `dplyr`)\n\nMostra a **estrutura dos dados de forma compacta e leg√≠vel**, similar ao `str()`, mas em formato horizontal:\n\n-   Exibe todas as vari√°veis, seus tipos e algumas observa√ß√µes iniciais\\\n-   Mais f√°cil de ler quando o banco de dados tem muitas colunas\n\nExemplo de sa√≠da (resumida):\n\n```{r}\nglimpse(dados_agro)\n\n```\n\n------------------------------------------------------------------------\n\n### Aula 7 ‚Äì Manipula√ß√£o com dplyr\n\n```{r}\n# Exemplo fict√≠cio\ndados <- data.frame(\n  tratamento = rep(c(\"T1\", \"T2\", \"T3\"), each = 4),\n  repeticao = rep(1:4, 3),\n  produtividade = c(30, 32, 28, 31, 35, 36, 34, 37, 25, 27, 26, 28)\n)\n\n# Selecionar colunas e filtrar\ndados |> dplyr::select(tratamento, produtividade) |> filter(produtividade > 30)\n\n# Resumo estat√≠stico\ndados |>\n  group_by(tratamento) |>\n  summarise(\n    media = mean(produtividade),\n    sd = sd(produtividade)\n  )\n```\n\n------------------------------------------------------------------------\n\n### Aula 8 ‚Äì Estat√≠stica Descritiva e Gr√°ficos\n\n```{r}\n# Histograma\nggplot(dados, aes(x = produtividade)) +\n  geom_histogram(binwidth = 2, fill = \"skyblue\", color = \"black\")\n\n# Boxplot\nggplot(dados, aes(x = tratamento, y = produtividade)) +\n  geom_boxplot(fill = \"orange\")\n\n```\n\n------------------------------------------------------------------------\n\n## üîπ M√≥dulo 3 ‚Äì An√°lise de Vari√¢ncia (ANOVA)\n\n### Aula 9 ‚Äì ANOVA em DIC\n\n```{r}\n# Primeiro transformar vari√°veis em fatores\ndados$tratamento <- factor(dados$tratamento)\ndados$repeticao <- factor(dados$repeticao)\n\n# ANOVA usando aov()\nmodelo <- aov(produtividade ~ tratamento, data = dados)\nsummary(modelo)\n\n\n# ANOVA usando rstatix\ndados |> anova_test(produtividade ~ tratamento)\n\n\n# ANOVA usando ExpDes.pt\ndic(\n  trat = dados$tratamento,\n  resp = dados$produtividade,\n  quali = TRUE,\n  mcomp = \"tukey\"\n)\n\n# ANOVA usando easyanova\neasyanova::ea1(dados[-2], design = 1, plot = 2)\n```\n\n\n**Testes de Pressupostos**\n\nAntes da an√°lise de vari√¢ncia (ANOVA), foi realizada a verifica√ß√£o dos pressupostos de **normalidade dos res√≠duos** e **homogeneidade das vari√¢ncias**, que s√£o condi√ß√µes necess√°rias para a validade do teste F.\n\n**Normalidade dos res√≠duos**\n\n- O **teste de Shapiro-Wilk** foi aplicado sobre os res√≠duos do modelo, verificando se a distribui√ß√£o se aproxima da normal.\n- Al√©m disso, a normalidade foi testada dentro de cada grupo experimental utilizando a fun√ß√£o `shapiro_test()` do pacote **rstatix**, o que permite avaliar poss√≠veis desvios em tratamentos espec√≠ficos.\n- Quando o valor de *p* > 0,05, n√£o se rejeita a hip√≥tese nula de normalidade, indicando que os res√≠duos podem ser considerados normalmente distribu√≠dos.\n\n```{r}\n# Normalidade\nshapiro.test(residuals(modelo))\n\n# Usando pacote rstatix e fazendo normalidade por grupo\ndados |> group_by(tratamento) |> rstatix::shapiro_test(produtividade)\n```\n\n\n**Homogeneidade das vari√¢ncias**\n\n- Para verificar se os tratamentos apresentam vari√¢ncias homog√™neas, foram aplicados tr√™s testes:\n  - **Teste de Bartlett**: sens√≠vel a desvios de normalidade, mas adequado quando os dados s√£o normais.\n  - **Teste de Levene**: mais robusto quando a normalidade n√£o √© estritamente atendida.\n\n\n```{r}\n# Homogeneidade\n## Teste de Bartlett\nbartlett.test(produtividade ~ tratamento, data = dados)\n\n## Teste de Levene\nrstatix::levene_test(produtividade ~ tratamento, data = dados)\n```\n\n\n>Em todos os testes, valores de *p* > 0,05 indicam que n√£o h√° evid√™ncias para rejeitar a hip√≥tese de homogeneidade das vari√¢ncias, atendendo ao pressuposto da ANOVA.\n\nDessa forma, a an√°lise de vari√¢ncia pode ser conduzida com confian√ßa, uma vez que os pressupostos de normalidade e homogeneidade foram verificados.\n\n\n**Compara√ß√µes de M√©dias**\n\n```{r}\n# Tukey no R base\nTukeyHSD(modelo)\n\n# Tukey no rstatix\ndados |> tukey_hsd(produtividade ~ tratamento)\n\n\n# M√©dias ajustadas\n# Emmeans\nemm <- emmeans(modelo, ~ tratamento)\ngrupos <- multcomp::cld(emm, Letters = letters, adjust = \"tukey\")\nprint(grupos)\n\n```\n\n\n\n------------------------------------------------------------------------\n\n### Aula 9 ‚Äì ANOVA em DBC\n\n**Anova**\n\nNo DBC (delineamento em blocos casualizados) a diferen√ßa principal √© que voc√™ precisa considerar o efeito de blocos no modelo. Seguindo o mesmo estilo da sua aula de DIC, aqui est√° a vers√£o para DBC:\n\n```{r}\n# ANOVA usando aov()\n# Aqui usamos Error(bloco) ou bloco como efeito\nmodelo <- aov(produtividade ~ tratamento + repeticao, data = dados)\nsummary(modelo)\n\n# ANOVA usando rstatix\ndados |> anova_test(produtividade ~ tratamento + repeticao)\n\n# ANOVA usando ExpDes.pt\ndbc(\n  trat = dados$tratamento,\n  bloco = dados$repeticao,\n  resp = dados$produtividade,\n  quali = TRUE,\n  mcomp = \"tukey\"\n)\n\n# ANOVA usando easyanova\n# design = 2 corresponde a DBC\neasyanova::ea1(dados, design = 2, plot = 2)\n\n```\nObserva√ß√µes importantes:\n\n- No `aov()`, o termo `+ bloco` garante que a varia√ß√£o entre blocos seja considerada.\n- No `ExpDes.pt`, usamos `dbc()` no lugar de `dic()`.\n- No `easyanova`, o argumento `design = 2` √© usado para DBC.\n\n\n\n**Testes de Pressupostos**\n\n```{r}\n# Normalidade\nshapiro.test(residuals(modelo))\n\n# Usando pacote rstatix e fazendo normalidade por grupo\ndados |> group_by(tratamento) |> rstatix::shapiro_test(produtividade)\n\n# Homogeneidade\n## Teste de Bartlett\nbartlett.test(produtividade ~ tratamento, data = dados)\n\n## Teste de Levene\nrstatix::levene_test(produtividade ~ tratamento, data = dados)\n\n## Teste de ONeill e Mathews\noneilldbc(trat = dados$tratamento, resp = dados$produtividade, bloco = dados$repeticao)\n```\n\nEm DBC tamb√©m foi realizado **Teste de O‚ÄôNeill e Mathews**, espec√≠fico para experimentos em blocos casualizados (DBC), sendo recomendado como alternativa robusta para esse delineamento.\n\n\n>Em todos os testes, valores de *p* > 0,05 indicam que n√£o h√° evid√™ncias para rejeitar a hip√≥tese de homogeneidade das vari√¢ncias, atendendo ao pressuposto da ANOVA.\n\n\n\n**Compara√ß√µes de M√©dias**\n\n```{r}\n# Tukey no R base\nTukeyHSD(modelo)\n\n# Tukey no rstatix\ndados |> tukey_hsd(produtividade ~ tratamento)\n\n\n# M√©dias ajustadas\n# Emmeans\nemm <- emmeans(modelo, ~ tratamento)\ngrupos <- multcomp::cld(emm, Letters = letters, adjust = \"tukey\")\nprint(grupos)\n\n```\n\n\n\n------------------------------------------------------------------------\n\n### Aula 12 ‚Äì ANOVA Fatorial\n\n```{r}\n# Exemplo com dois fatores\ndados2 <- expand.grid(\n  adubacao = c(\"A1\", \"A2\"),\n  cultivar = c(\"C1\", \"C2\", \"C3\"),\n  rep = 1:4\n)\nset.seed(123)\ndados2$produtividade <- rnorm(24, mean = 30, sd = 3)\n\n# ANOVA\nmodelo2 <- aov(produtividade ~ adubacao * cultivar, data = dados2)\nsummary(modelo2)\n\n# ExpDes.pt\nfat2.dic(\n  fator1 = dados2$adubacao,\n  fator2 = dados2$cultivar,\n  resp = dados2$produtividade,\n  quali = c(TRUE, TRUE),\n  mcomp = \"tukey\"\n)\n```\n\n------------------------------------------------------------------------\n\n## üîπ M√≥dulo 4 ‚Äì Regress√£o\n\n### Aula 13 ‚Äì Regress√£o Linear\n\n```{r}\ndose <- c(0, 50, 100, 150, 200)\nprod <- c(20, 28, 35, 40, 38)\ndados_reg <- data.frame(dose, prod)\n\nmodelo_reg <- lm(prod ~ dose, data = dados_reg)\na <- summary(modelo_reg)\n\n# Coeficientes\ncoeficientes <- coef(modelo_reg)\nintercepto <- round(coeficientes[1], 2) # sem sinal extra\nslope <- formatC(coeficientes[2], format = \"f\", digits = 2, flag = \"+\") # sempre com sinal\n\n# Estat√≠sticas do modelo\nr2 <- round(a$r.squared, 4)\nf_value <- a$fstatistic[1]\ndf1 <- a$fstatistic[2]\ndf2 <- a$fstatistic[3]\np_value_anova <- pf(f_value, df1, df2, lower.tail = FALSE)\n\n\n\n\n# Equa√ß√£o no formato correto\nequacao <- paste0(\"y = \", intercepto, slope, \"x\")\n\nlegenda <- paste0(\n  equacao,\n  \"  R¬≤ = \", r2,\n  \"\\nF = \", f_value,\n  \"; p = \", format.pval(p_value_anova, digits = 4, eps = 0.001)\n)\n\n\n\ndados_reg |>\n  ggplot(aes(x = dose, y = prod)) +\n  geom_point(size = 3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +\n  annotate(\"text\",\n           x = 100, y = 10,\n           label = legenda,\n           hjust = 0, size = 5) +\n  labs(x = \"Frequ√™ncia de irriga√ß√£o\", y = \"CRA (%)\") +\n  theme_bw() +\n  theme(panel.grid = element_blank()) +\n  ylim(0, 50)\n\n```\n\n------------------------------------------------------------------------\n\n### Aula 14 ‚Äì Regress√£o Quadr√°tica\n\n```{r}\n# Ajustar modelo de regress√£o quadr√°tica\nmodelo_quad <- lm(prod ~ dose + I(dose^2), data = dados_reg)\na <- summary(modelo_quad)\na\n# Coeficientes da regress√£o quadr√°tica (com mais casas decimais)\ncoef_quad <- coef(modelo_quad)\nintercepto <- formatC(coef_quad[1], format = \"f\", digits = 4)\nlinear     <- formatC(coef_quad[2], format = \"f\", digits = 4, flag = \"+\")\nquadratico <- formatC(coef_quad[3], format = \"f\", digits = 4, flag = \"+\") \n# usei 6 casas para o termo quadr√°tico porque geralmente √© bem pequeno\n\n# Estat√≠sticas do modelo\nr2 <- round(a$r.squared, 4)\nf_value <- a$fstatistic[1]\ndf1 <- a$fstatistic[2]\ndf2 <- a$fstatistic[3]\np_value_anova <- pf(f_value, df1, df2, lower.tail = FALSE)\n\n# Equa√ß√£o para legenda\nequacao <- paste0(\"y = \", intercepto, \" \", linear, \"x \", quadratico, \"x¬≤\")\nlegenda <- paste0(\n  equacao,\n  \"  R¬≤ = \", r2,\n  \"\\nF = \", round(f_value, 2),\n  \"; p = \", format.pval(p_value_anova, digits = 4, eps = 0.001)\n)\n\n# Gr√°fico\nlibrary(ggplot2)\n\nregressao_quad <- ggplot(dados_reg, aes(x = dose, y = prod)) +\n  geom_point(size = 3) +\n  stat_smooth(\n    method = \"lm\",\n    formula = y ~ x + I(x^2),\n    se = FALSE,\n    color = \"black\"\n  ) +\n  annotate(\"text\", x = 50, y = 10, label = legenda, hjust = 0, size = 5) +\n  labs(x = \"Dose\", y = \"Produ√ß√£o\") +\n  theme_bw() +\n  theme(panel.grid = element_blank()) +\n  ylim(0, 50)\n\n# Exibir gr√°fico\nregressao_quad\n\n```\n\n## üîπ M√≥dulo 5 ‚Äì Relat√≥rios e Projeto Final\n\n### Aula 15 ‚Äì Relat√≥rios com RMarkdown\n\n-   Este pr√≥prio arquivo √© um exemplo.\\\n-   Pode ser exportado em HTML, Word ou PDF.\n\n------------------------------------------------------------------------\n\n## ‚úÖ Projeto Final\n\nAnalise um conjunto de dados agr√≠colas (real ou fornecido):\\\n- Estruture os dados no Excel/CSV.\\\n- Importe para o R.\\\n- Realize ANOVA (com `aov()`, `ExpDes.pt`, `easyanova` e `rstatix`).\\\n- Teste pressupostos.\\\n- Se necess√°rio, ajuste modelos de regress√£o.\\\n- Gere gr√°ficos com `ggplot2`.\\\n- Organize os resultados em relat√≥rio RMarkdown.\n\n------------------------------------------------------------------------\n","srcMarkdownNoYaml":"\n\n# <i class=\"fas fa-code\"></i>  Exemplos de C√≥digos {#exemplos-de-c√≥digos}\n\n## üîπ M√≥dulo 1 ‚Äì Introdu√ß√£o ao R e Organiza√ß√£o de Dados\n\n### Aula 1 ‚Äì Instala√ß√£o e primeiros passos\n\n-   Instale o R e o RStudio em seu computador.\\\n\nO **R** √© o programa principal, ou seja, a linguagem de programa√ß√£o e o ambiente de c√°lculo.\\\n√â nele que todos os comandos s√£o processados e as an√°lises estat√≠sticas s√£o realizadas.\\\nPor isso, o primeiro passo √© instalar o R no computador.\\\nO download deve ser feito diretamente no site oficial do CRAN (Comprehensive R Archive Network):\n\n<i class=\"fa-brands fa-r-project\"></i> <https://cran.r-project.org/>\n\nAo abrir o link, basta escolher o sistema operacional do seu computador (Windows, macOS ou Linux) e seguir as instru√ß√µes de instala√ß√£o.\\\nCom isso, voc√™ j√° ter√° o R funcionando, embora a sua interface seja bastante simples e pouco intuitiva para quem est√° come√ßando.\n\n√â justamente nesse ponto que entra o **RStudio**.\\\nO RStudio n√£o √© um programa separado do R, mas sim uma **IDE (Integrated Development Environment)**, ou seja, um ambiente de desenvolvimento que facilita o uso do R.\\\nEle oferece uma interface gr√°fica amig√°vel, onde voc√™ pode escrever c√≥digos, visualizar gr√°ficos, organizar projetos e instalar pacotes com muito mais facilidade.\n\nNo entanto, √© fundamental compreender que o RStudio **n√£o funciona sozinho**.\\\nEle depende do R j√° instalado na m√°quina, pois √© o R quem executa de fato os c√°lculos.\\\nPor isso, a ordem correta √©: primeiro instalar o R e, em seguida, instalar o RStudio.\n\nO download do RStudio pode ser feito no site oficial da Posit (empresa respons√°vel pelo software):\n\nüëâ <https://posit.co/download/rstudio-desktop/>\n\nAo instalar os dois programas, voc√™ ter√° o **R** como motor de c√°lculo e o **RStudio** como painel de controle, trabalhando em conjunto.\\\nEssa combina√ß√£o √© a mais utilizada no mundo acad√™mico e profissional para an√°lises estat√≠sticas e ci√™ncia de dados.\n\n-   Conhe√ßa os principais pain√©is do RStudio:\n    -   *Console* (execu√ß√£o de comandos)\\\n    -   *Source* (script)\\\n    -   *Environment/History* (objetos)\\\n    -   *Plots/Packages/Help*\n\n**Verificando vers√£o do R**\n\n```{r}\n# Verificando vers√£o do R\nversion\n```\n\n**Citando o R**\n\n```{r}\n# Cita√ß√£o do R\ncitation()\n```\n\n**Opera√ß√µes simples**\n\n```{r}\n# Opera√ß√µes simples\n\n## Soma\n2 + 2\n\n## Subtra√ß√£o\n7 - 2\n\n## Mutiplica√ß√£o\n4 * 3\n\n## Divis√£o\n10 / 3\n\n## Raiz quadrada\nsqrt(25)\n```\n\n------------------------------------------------------------------------\n\n### Aula 2 ‚Äì Objetos no R\n\nNesta aula, aprendemos a criar e manipular objetos no R. Objetos s√£o vari√°veis que armazenam valores ou resultados de c√°lculos, permitindo que possamos reutiliz√°-los em outras opera√ß√µes.\n\nNo exemplo apresentado, criamos dois objetos num√©ricos:\n\n```{r}\n# Criando objetos\nx <- 5\ny <- 10\n```\n\nAqui, x recebe o valor 5 e y recebe o valor 10. Em seguida, criamos um terceiro objeto chamado soma, que armazena a soma de x e y:\n\n```{r}\nsoma <- x + y\nsoma\n```\n\nAo digitar apenas soma, o R retorna o valor armazenado neste objeto, que neste caso √© 15.\n\nEste exemplo ilustra a forma b√°sica de criar objetos no R e realizar opera√ß√µes simples com eles, fundamental para qualquer an√°lise de dados ou programa√ß√£o no software.\n\n------------------------------------------------------------------------\n\n### Aula 3 ‚Äì Pacotes\n\nNo R, os pacotes s√£o conjuntos de fun√ß√µes, dados e recursos que estendem as capacidades b√°sicas do software, permitindo realizar an√°lises mais complexas de forma pr√°tica e eficiente.\n\nNo exemplo abaixo, veja como instalar alguns pacotes importantes um de cada vez:\n\n```{r}\n#| message: false\n#| warning: false\n#| eval: false\n\n# Carregando pacotes\ninstall.packages(\"tidyverse\")   # Para manipula√ß√£o e visualiza√ß√£o de dados\ninstall.packages(\"dplyr\")   # Para manipula√ß√£o e visualiza√ß√£o de dados\ninstall.packages(\"readxl\")      # Para ler arquivos do Excel\ninstall.packages(\"ExpDes.pt\")   # Para planejamento e an√°lise de experimentos agr√≠colas\ninstall.packages(\"easyanova\")   # Para facilitar an√°lises de vari√¢ncia\ninstall.packages(\"rstatix\")     # Para estat√≠sticas descritivas e testes inferenciais\ninstall.packages(\"emmeans\")     # Para estat√≠sticas descritivas e testes inferenciais\n\n```\n\nOuse preferir pode instalar v√°rios de uma √∫nica vez:\n\n```{r}\n#| message: false\n#| warning: false\n#| eval: false\n\n# Carregando pacotes\ninstall.packages(\"tidyverse\", \"readxl\", \"ExpDes.pt\", \"easyanova\", \"rstatix\", \"emmeans\")\n\n```\n\nNo exemplo abaixo, carregamos alguns pacotes importantes:\n\n```{r}\n#| message: false\n#| warning: false\n\n# Carregando pacotes\n\n# ---------------------------\n# Pacotes para manipula√ß√£o e leitura de dados\n# ---------------------------\nlibrary(tidyverse)   # Inclui dplyr, ggplot2, readr, tidyr, etc.\nlibrary(dplyr)       # Manipula√ß√£o de dados\nlibrary(readxl)      # Para importar planilhas Excel\n\n# ---------------------------\n# Pacotes para an√°lise de experimentos\n# ---------------------------\nlibrary(ExpDes.pt)   # ANOVA para DIC, DBC, parcelas subdivididas etc.\nlibrary(easyanova)   # ANOVA e testes complementares de forma simplificada\n\n# ---------------------------\n# Pacotes para estat√≠stica e p√≥s-testes\n# ---------------------------\nlibrary(rstatix)     # Testes estat√≠sticos (normalidade, homogeneidade, etc.)\nlibrary(emmeans)     # M√©dias ajustadas e compara√ß√µes m√∫ltiplas\n```\n\n\n\n\n------------------------------------------------------------------------\n\n### Aula 4 - Organiza√ß√£o e Padroniza√ß√£o dos Dados\n\nUm dos passos mais importantes em qualquer an√°lise √© a **organiza√ß√£o adequada dos dados**. Dados desorganizados ou com nomes de vari√°veis inconsistentes podem dificultar o trabalho, aumentar a chance de erros e at√© inviabilizar o uso de fun√ß√µes em softwares estat√≠sticos como o R.\n\nVeja esse esse exmeplo de banco de dados (`dados_ruins_dic`) no Excel:\n\n```{r}\n#| include: false\n# Banco com nomes pouco apropriados (exemplo did√°tico)\ndados_ruins_dic <- data.frame(\n  `Tratamento (Aduba√ß√£o)` = rep(c(\"T1 - Testemunha\", \n                                  \"T2 - 50kg N\", \n                                  \"T3 - 100kg N\", \n                                  \"T4 - 150kg N\"), each = 5),\n  \"Repeti√ß√£o\" = rep(1:5, times = 4),\n  \"Altura da planta (cm)\" = c(\n    160, 165, 158, 162, 161,   # T1 (testemunha, mais baixo)\n    180, 185, 178, 182, 184,   # T2\n    200, 205, 198, 202, 201,   # T3\n    220, 225, 218, 222, 221    # T4 (maior aduba√ß√£o)\n  ),\n  \"Mat√©ria seca (g)\" = c(\n    280, 300, 290, 295, 285,   # T1\n    360, 370, 365, 368, 362,   # T2\n    450, 460, 455, 465, 458,   # T3\n    550, 560, 545, 555, 548    # T4\n  )\n)\n\n# Ajustando nomes das colunas para ficarem bonitos no Excel\ncolnames(dados_ruins_dic) <- c(\"Repeti√ß√£o\", \"Tratamento\", \"Altura da planta (cm)\", \"Mat√©ria seca (g)\")\n```\n\n\n```{r}\n#| echo: false\ndados_ruins_dic |> \n  kableExtra::kable() |> \n  kableExtra::kable_paper(html_font = \"Arial\")\n```\n\n\n**Import√¢ncia de bons t√≠tulos nas vari√°veis**\n\nNo R, os **nomes das colunas** (ou t√≠tulos das vari√°veis) devem seguir algumas boas pr√°ticas para facilitar a an√°lise:\n\n\n- **Padr√£o `snake_case`**: usar letras min√∫sculas e sublinhados para separar palavras, como `altura_planta_g`.\n- **Evitar espa√ßos**: em vez de `Altura da Planta`, utilizar `Altura_Planta`.  \n- **Usar unidades no nome da vari√°vel**: em vez de `Altura da Planta (cm)`, utilizar `Altura_Planta_cm`.  \n- **Usar letras min√∫sculas** (ou padr√£o definido): `altura_planta_cm`.  \n- **Evitar acentos e caracteres especiais**: em vez de `Mat√©ria seca (g)`, utilizar `materia_seca_g`.  \n- **Ser descritivo, mas n√£o excessivamente longo**: `peso_frutos` em vez de `pf_colheita_experimental_2024`.  \n\nEsses cuidados tornam o banco de dados mais **limpo, reprodut√≠vel e compat√≠vel com fun√ß√µes e pacotes do R**.\n\n**Como organizar os t√≠tulos**\n\n1. **Pode fazer manulamente no Excel**  \n   - Antes de importar o arquivo para o R, pode-se renomear diretamente no Excel.  \n   - Exemplo: renomear a coluna de `Massa seca total (g)` para `massa_seca_total_g`.  \n\n\n2. **Manualmente no R usando o pacote `dplyr`**  \n\nA fun√ß√£o `rename()` do pacote dplyr permite renomear manualmente colunas espec√≠ficas.\n\n\n```{r}\n# Renomear colunas espec√≠ficas\nlibrary(dplyr)\ndados_organizados_dplyr <- dados_ruins_dic |>\n  rename(\n    repeticao = `Repeti√ß√£o`,\n    tratamento = Tratamento,\n    altura_planta_cm = `Altura da planta (cm)`,\n    materia_seca_g = `Mat√©ria seca (g)`\n  )\n```\n\n\n```{r}\n#| echo: false\n# Ver banco de dados\ndados_organizados_dplyr |> \n  kableExtra::kable() |> \n  kableExtra::kable_paper(html_font = \"Arial\")\n```\n\n\n\nNomes antes:\n\n```{r}\n# Ver como eram\nnames(dados_ruins_dic)\n```\n\n\nNomes depois:\n\n```{r}\n# Ver como ficaram\nnames(dados_organizados_dplyr)\n```\n\n\n\n3. **Autom√°tico usando o pacote `janitor`**  \n   Existem pacotes que auxiliam na padroniza√ß√£o dos nomes de maneira autom√°tica:\n\n   - Pacote **`janitor`**: a fun√ß√£o `clean_names()` desse pacote converte automaticamente os t√≠tulos para um formato padr√£o (`snake_case`).  \n\nVeja o que acontece com esse banco de dados (`dados_ruins_dic`):\n\n```{r}\n# Corrigir nomes das colunas -> formato \"snake_case\"\ndados_organizados_janitor <- dados_ruins_dic |> \n  janitor::clean_names()\n```\n\n\n```{r}\n#| echo: false\n# Ver banco de dados\ndados_organizados_janitor |> \n  kableExtra::kable() |> \n  kableExtra::kable_paper(html_font = \"Arial\")\n```\n\nNomes antes:\n\n```{r}\n# Ver como eram\nnames(dados_ruins_dic)\n```\n\n\nNomes depois:\n\n```{r}\n# Ver como ficaram\nnames(dados_organizados_janitor)\n```\n\n------------------------------------------------------------------------\n\n### Aula 5 ‚Äì Importa√ß√£o de Dados\n\n**Importando dados**\n\nImportar dados para o R √© um passo fundamental para qualquer an√°lise. No R, √© poss√≠vel importar dados de diferentes formatos, o que √© essencial para iniciar qualquer an√°lise. O R permite ler diferentes formatos de arquivos, como CSV e Excel.\n\n```{r}\n\n# Importando CSV\n# dados_csv <- read.csv(\"meus_dados.csv\", sep = \";\", dec = \",\")\n# L√™ arquivos CSV, permitindo especificar o separador de colunas (sep) e o separador decimal (dec)\n\n# Importando Excel\n# dados_excel <- readxl::read_excel(\"meus_dados.xlsx\")\n# L√™ planilhas do Excel diretamente para o R\n\n# Importando arquivo de texto (TXT)\n# dados_txt <- read.table(\"meus_dados.txt\", header = TRUE, sep = \"\\t\", dec = \".\")\n# L√™ arquivos de texto, onde 'header = TRUE' indica que a primeira linha cont√©m os nomes das colunas,\n# 'sep = \"\\t\"' indica que as colunas s√£o separadas por tabula√ß√£o, e 'dec = \".\"' define o separador decimal\n\n```\n\n-   `read.csv()` l√™ arquivos no formato CSV (Comma-Separated Values), permitindo especificar o separador de colunas (sep) e o separador decimal (dec). √â indicado para planilhas exportadas como CSV ou dados gerados por outros programas.\n\n-   `read_excel()` (do pacote `readxl`) l√™ arquivos do Excel (.xls ou .xlsx) diretamente, mantendo nomes das colunas e tipos de dados corretamente, o que facilita a importa√ß√£o de planilhas complexas sem precisar convert√™-las.\n\n-   `read.table()` l√™ arquivos de texto simples (TXT ou outros delimitados), oferecendo flexibilidade para especificar se h√° cabe√ßalho (header = TRUE), o separador de colunas (sep) e o separador decimal (dec). √â ideal para arquivos de texto com diferentes formatos de separa√ß√£o.\n\n**Visualizando os dados**\n\nAp√≥s a importa√ß√£o, podemos visualizar os dados para verificar se foram carregados corretamente: Ap√≥s a importa√ß√£o, √© importante visualizar os dados para conferir se foram carregados corretamente. Para isso, podem ser usadas fun√ß√µes como:\n\n-   `head()` (exibe as primeiras linhas),\n-   `summary()` (mostra resumo estat√≠stico das vari√°veis),\n-   `str()` (mostra a estrutura do objeto) e\n-   `glimpse()` (exibe de forma compacta e leg√≠vel a estrutura e os tipos das vari√°veis).\n\n\n\n\n\n```{r}\n\n# head(dados_csv)    # Mostra as primeiras linhas do conjunto de dados\n# summary(dados_csv) # Mostra um resumo estat√≠stico das vari√°veis\n# str(dados_csv)     # Mostra a estrutura do objeto, incluindo tipos de vari√°veis e dimens√µes\n# glimpse(dados_csv)  # Mostra todas as vari√°veis, seus tipos e algumas observa√ß√µes de cada coluna\n\n```\n\n\n\n\n------------------------------------------------------------------------\n\n## üîπ M√≥dulo 2 ‚Äì Manipula√ß√£o e Explora√ß√£o de Dados\n\n### Aula 6 ‚Äì Tipos de Vari√°veis em R\n\n1.  **Vari√°veis num√©ricas**\n    -   **Cont√≠nuas (`numeric` / `dbl`)**: podem assumir qualquer valor dentro de um intervalo, incluindo decimais.\\\n        **Exemplo:** Produtividade (t/ha), √Årea (m¬≤)\n    -   **Discretas (`integer` / `int`)**: assumem apenas valores inteiros.\\\n        **Exemplo:** Parcela (identificador das parcelas)\n2.  **Vari√°veis categ√≥ricas (fatores) (`factor` / `fct`)**\n    -   Representam categorias ou grupos que o R reconhece para an√°lises estat√≠sticas.\\\n        **Exemplo:** Tratamento, Variedade\\\n    -   Ideais para an√°lise de vari√¢ncia e compara√ß√µes entre grupos\n3.  **Vari√°veis de texto (`character` / `chr`)**\n    -   Cont√™m informa√ß√µes textuais ou descritivas, que n√£o t√™m ordem ou significado num√©rico.\\\n        **Exemplo:** Local (Norte, Sul, Leste)\\\n    -   N√£o s√£o usadas diretamente em c√°lculos estat√≠sticos, mas servem para identificar ou agrupar dados\n4.  **Vari√°veis l√≥gicas (`logical` / `logi`)**\n    -   Assumem apenas dois valores: `TRUE` ou `FALSE`\\\n        **Exemplo:** Irrigado\\\n    -   √öteis para condi√ß√µes, filtros e an√°lises condicionais\n5.  **Outros tipos dispon√≠veis em R**\n    -   **Complexo (`complex` / sem abrevia√ß√£o comum)**: n√∫meros complexos, como `1+2i`\n    -   **Raw (`raw` / sem abrevia√ß√£o comum)**: representa dados brutos em bytes\\\n    -   **Date (`Date` / sem abrevia√ß√£o comum)**: datas no formato `\"YYYY-MM-DD\"`\\\n    -   **POSIXct / POSIXlt (`POSIXct` / `POSIXlt`)**: datas e horas com tempo\n    -   **Ordered factor (`ordered` / `ord`)**: fatores com ordem natural definida\n\n------------------------------------------------------------------------\n\nNeste exemplo, iremos **criar vari√°veis de diferentes tipos** em R ‚Äî num√©ricas cont√≠nuas, num√©ricas discretas e categ√≥ricas (fatores) ‚Äî e, em seguida, **identificar o tipo de cada vari√°vel** usando a fun√ß√£o `class()`.\n\nIsso nos permite compreender como o R armazena cada tipo de dado e como ele ser√° tratado em an√°lises estat√≠sticas.\n\n```{r}\n# Num√©rica cont√≠nua\nnum_cont <- 3.5      # numeric / dbl\nclass(num_cont) # Checando classes\n\n# Num√©rica discreta\nnum_disc <- 5L       # integer / int\nclass(num_disc)\n\n# Fator (categ√≥rica)\ntrat <- factor(c(\"T1\", \"T2\", \"T3\"))  # factor / fct\nclass(trat)\n\n# Ordered factor\nord_trat <- factor(c(\"Baixo\", \"M√©dio\", \"Alto\"), ordered = TRUE) # ordered / ord\nclass(ord_trat)\n\n# Character\nlocal <- c(\"Norte\", \"Sul\")  # character / chr\nclass(local)\n\n# L√≥gica\nirr <- c(TRUE, FALSE)       # logical / logi\nclass(irr)\n\n# Complexo\ncplx <- 1 + 2i              # complex\nclass(cplx)\n\n# Raw\nr <- charToRaw(\"A\")         # raw\nclass(r)\n\n# Datas\nd <- as.Date(\"2025-08-29\")  # Date\nclass(d)\n\ndt <- as.POSIXct(\"2025-08-29 12:00:00\") # POSIXct\nclass(dt)\n\n```\n\n<br>\n\n**Criando banco de dados fict√≠cio**\n\nNeste exemplo, iremos **criar um banco de dados fict√≠cio de um experimento agr√≠cola** com diferentes tipos de vari√°veis: num√©ricas (cont√≠nuas e discretas), categ√≥ricas, l√≥gicas e de texto.\n\nEm seguida, iremos **visualizar o banco de dados e identificar os tipos de vari√°veis**, para entender como o R armazena cada tipo e como podemos manipul√°-las em an√°lises estat√≠sticas.\n\n```{r}\n# Exemplo de banco de dados de experimento agr√≠cola\ndados_agro <- data.frame(\n  Parcela = 1:9,                               # Num√©rica discreta (identifica√ß√£o das parcelas)\n  Tratamento = factor(rep(c(\"T1\", \"T2\", \"T3\"), each = 3)), # Fator (categ√≥rica nominal)\n  Variedade = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\")), # Fator (categ√≥rica nominal)\n  Area = c(10, 10, 10, 12, 12, 12, 11, 11, 11),  # Num√©rica cont√≠nua (m¬≤)\n  Produtividade = c(30.5, 32.0, 31.0, 28.0, 29.5, 30.0, 33.0, 34.5, 32.5), # Num√©rica cont√≠nua (t/ha)\n  Irrigado = c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE),   # L√≥gica\n  Local = c(\"Norte\", \"Norte\", \"Norte\", \"Sul\", \"Sul\", \"Sul\", \"Leste\", \"Leste\", \"Leste\") # Texto (character)\n)\n```\n\n```{r}\n# Exemplo de banco de dados de experimento agr√≠cola\ndados_agro <- data.frame(\n  Parcela = 1:9,                               # Num√©rica discreta (identifica√ß√£o das parcelas)\n  Tratamento = rep(c(\"T1\", \"T2\", \"T3\"), each = 3), # Fator (categ√≥rica nominal)\n  Variedade = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\"), # Fator (categ√≥rica nominal)\n  Area = c(10, 10, 10, 12, 12, 12, 11, 11, 11),  # Num√©rica cont√≠nua (m¬≤)\n  Produtividade = c(30.5, 32.0, 31.0, 28.0, 29.5, 30.0, 33.0, 34.5, 32.5), # Num√©rica cont√≠nua (t/ha)\n  Irrigado = c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE),   # L√≥gica\n  Local = c(\"Norte\", \"Norte\", \"Norte\", \"Sul\", \"Sul\", \"Sul\", \"Leste\", \"Leste\", \"Leste\") # Texto (character)\n)\n```\n\n<br>\n\n**Fun√ß√µes para Visualiza√ß√£o e Estrutura de Dados no R**\n\n1.  **`head(dados_agro)`**\\\n    Mostra as **primeiras linhas** do conjunto de dados.\n    -   √ötil para ter uma **vis√£o r√°pida** do conte√∫do do banco, verificando se os dados foram importados corretamente.\\\n    -   Exemplo de sa√≠da:\n\n```{r}\nhead(dados_agro) \n```\n\n<br>\n\n2.  **`str(dados_agro)`**\n\nMostra a **estrutura do objeto**, permitindo entender rapidamente como os dados est√£o organizados no R.\n\nCom essa fun√ß√£o, √© poss√≠vel:\n\n-   Ver o **n√∫mero de observa√ß√µes** (linhas) e o **n√∫mero de vari√°veis** (colunas) do banco de dados, por exemplo, `9 obs. of 7 variables`.\\\n-   Identificar o **tipo de cada vari√°vel**, como `int` (inteiro), `num` (num√©rico cont√≠nuo), `Factor` (categ√≥rica), `logi` (l√≥gica/boolean) e `chr` (texto).\\\n-   Conferir **alguns valores iniciais de cada coluna**, ajudando a verificar se os dados foram importados corretamente e se os tipos est√£o adequados para an√°lise.\n\nEm resumo, `str()` √© uma fun√ß√£o essencial para **inspecionar rapidamente a estrutura e os tipos das vari√°veis**, antes de realizar qualquer an√°lise estat√≠stica ou manipula√ß√£o dos dados.\n\n```{r}\nstr(dados_agro)\n\n```\nObserve que **Tratamento** e **Variedade** aparecem como `character`, ou seja, texto.\\\nPara an√°lises estat√≠sticas, √© recomendado transformar essas vari√°veis em fatores.\n\n<br>\n\n3.  **`summary(dados_agro)`**\n\nMostra um **resumo estat√≠stico** das vari√°veis:\\\n- Para vari√°veis num√©ricas: m√≠nimo, m√°ximo, m√©dia, quartis\\\n- Para fatores: contagem de cada n√≠vel\\\n- Para l√≥gicas: contagem de `TRUE` e `FALSE`\\\n- √ötil para identificar tend√™ncias, valores extremos e distribui√ß√£o dos dados.\n\n```{r}\nsummary(dados_agro)\n\n```\n\nVeja novamente que **Tratamento** e **Variedade** aparecem como `character`.\\\nE n√£o s√£o reconhecidas como fatores.\\\nE n√£o √© poss√≠vel perceber quais s√£o os n√≠veis de cada vari√°vel categ√≥rica.\\\n\n**Convertendo variaveis categ√≥ricas em fatores**\n\n1. Pode-se convert√™-las em fatores usando a fun√ß√£o `as.factor()`:\n\n```{r}\ndados_agro$Tratamento <- as.factor(dados_agro$Tratamento)\ndados_agro$Variedade <- as.factor(dados_agro$Variedade)\n```\n\nAgora veja como fica a **estrutura** dos dados:\n\n```{r}\nstr(dados_agro)\n```\n\nAgora sim, Tratamento e variedade aparecem como `Factor` com 3 n√≠veis cada.\n\nveja como fica o **resumo estat√≠stico** dos dados:\n\n```{r}\nsummary(dados_agro)\n```\n\nAgora √© poss√≠vel ver a contagem de cada n√≠vel das vari√°veis categ√≥ricas.\nOu seja, s√£o 3 n√≠veis em cada vari√°vel (T1, T2, T3 para Tratamento e A, B, C para Variedade).\n\n2. Pode-se convert√™-las em fatores usando a fun√ß√£o `factor()`:\n\nTamb√©m d√° para criar o fator diretamente com a fun√ß√£o `factor()`, que √© mais flex√≠vel porque permite:\n\n- Definir os n√≠veis (`levels`)\n- Definir as etiquetas (`labels`)\n\nOu seja, permite controlar a ordem e o r√≥tulo dos n√≠veis (mais recomendado para ANOVA e modelos, pois evita ordem alfab√©tica indesejada).\n\n```{r}\n#| include: false\n#| echo: true\n\n\ndados_agro$Tratamento <- factor(\n  dados_agro$Tratamento,\n  levels = c(\"T1\", \"T2\", \"T3\"),                 # ordem dos n√≠veis\n  labels = c(\"Controle\", \"Adubo\", \"Bioestimulante\") # nomes leg√≠veis\n)\n\ndados_agro$Variedade <- factor(\n  dados_agro$Variedade,\n  levels = c(\"A\", \"B\", \"C\"),\n  labels = c(\"IPA 11\", \"Campo Lindo\", \"Mata-Hari\") # nomes reais das variedades\n)\n\nstr(dados_agro)\n```\n3. Pode-se ainda convert√™-las em fatores usando a fun√ß√£o `convert_as_factor()` do pacote {rstatix}:\n\nA fun√ß√£o `convert_as_factor()` pode converter uma ou v√°rias colunas ao mesmo tempo.\n\n```{r}\n#| warning: false\n#| include: false\n#| echo: true\n\nlibrary(rstatix)\n\ndados_agro <- dados_agro |> \n  convert_as_factor(Tratamento, Variedade)\n\n```\n\n\n\n<br>\n\n4.  **`glimpse(dados_agro)`** (do pacote `dplyr`)\n\nMostra a **estrutura dos dados de forma compacta e leg√≠vel**, similar ao `str()`, mas em formato horizontal:\n\n-   Exibe todas as vari√°veis, seus tipos e algumas observa√ß√µes iniciais\\\n-   Mais f√°cil de ler quando o banco de dados tem muitas colunas\n\nExemplo de sa√≠da (resumida):\n\n```{r}\nglimpse(dados_agro)\n\n```\n\n------------------------------------------------------------------------\n\n### Aula 7 ‚Äì Manipula√ß√£o com dplyr\n\n```{r}\n# Exemplo fict√≠cio\ndados <- data.frame(\n  tratamento = rep(c(\"T1\", \"T2\", \"T3\"), each = 4),\n  repeticao = rep(1:4, 3),\n  produtividade = c(30, 32, 28, 31, 35, 36, 34, 37, 25, 27, 26, 28)\n)\n\n# Selecionar colunas e filtrar\ndados |> dplyr::select(tratamento, produtividade) |> filter(produtividade > 30)\n\n# Resumo estat√≠stico\ndados |>\n  group_by(tratamento) |>\n  summarise(\n    media = mean(produtividade),\n    sd = sd(produtividade)\n  )\n```\n\n------------------------------------------------------------------------\n\n### Aula 8 ‚Äì Estat√≠stica Descritiva e Gr√°ficos\n\n```{r}\n# Histograma\nggplot(dados, aes(x = produtividade)) +\n  geom_histogram(binwidth = 2, fill = \"skyblue\", color = \"black\")\n\n# Boxplot\nggplot(dados, aes(x = tratamento, y = produtividade)) +\n  geom_boxplot(fill = \"orange\")\n\n```\n\n------------------------------------------------------------------------\n\n## üîπ M√≥dulo 3 ‚Äì An√°lise de Vari√¢ncia (ANOVA)\n\n### Aula 9 ‚Äì ANOVA em DIC\n\n```{r}\n# Primeiro transformar vari√°veis em fatores\ndados$tratamento <- factor(dados$tratamento)\ndados$repeticao <- factor(dados$repeticao)\n\n# ANOVA usando aov()\nmodelo <- aov(produtividade ~ tratamento, data = dados)\nsummary(modelo)\n\n\n# ANOVA usando rstatix\ndados |> anova_test(produtividade ~ tratamento)\n\n\n# ANOVA usando ExpDes.pt\ndic(\n  trat = dados$tratamento,\n  resp = dados$produtividade,\n  quali = TRUE,\n  mcomp = \"tukey\"\n)\n\n# ANOVA usando easyanova\neasyanova::ea1(dados[-2], design = 1, plot = 2)\n```\n\n\n**Testes de Pressupostos**\n\nAntes da an√°lise de vari√¢ncia (ANOVA), foi realizada a verifica√ß√£o dos pressupostos de **normalidade dos res√≠duos** e **homogeneidade das vari√¢ncias**, que s√£o condi√ß√µes necess√°rias para a validade do teste F.\n\n**Normalidade dos res√≠duos**\n\n- O **teste de Shapiro-Wilk** foi aplicado sobre os res√≠duos do modelo, verificando se a distribui√ß√£o se aproxima da normal.\n- Al√©m disso, a normalidade foi testada dentro de cada grupo experimental utilizando a fun√ß√£o `shapiro_test()` do pacote **rstatix**, o que permite avaliar poss√≠veis desvios em tratamentos espec√≠ficos.\n- Quando o valor de *p* > 0,05, n√£o se rejeita a hip√≥tese nula de normalidade, indicando que os res√≠duos podem ser considerados normalmente distribu√≠dos.\n\n```{r}\n# Normalidade\nshapiro.test(residuals(modelo))\n\n# Usando pacote rstatix e fazendo normalidade por grupo\ndados |> group_by(tratamento) |> rstatix::shapiro_test(produtividade)\n```\n\n\n**Homogeneidade das vari√¢ncias**\n\n- Para verificar se os tratamentos apresentam vari√¢ncias homog√™neas, foram aplicados tr√™s testes:\n  - **Teste de Bartlett**: sens√≠vel a desvios de normalidade, mas adequado quando os dados s√£o normais.\n  - **Teste de Levene**: mais robusto quando a normalidade n√£o √© estritamente atendida.\n\n\n```{r}\n# Homogeneidade\n## Teste de Bartlett\nbartlett.test(produtividade ~ tratamento, data = dados)\n\n## Teste de Levene\nrstatix::levene_test(produtividade ~ tratamento, data = dados)\n```\n\n\n>Em todos os testes, valores de *p* > 0,05 indicam que n√£o h√° evid√™ncias para rejeitar a hip√≥tese de homogeneidade das vari√¢ncias, atendendo ao pressuposto da ANOVA.\n\nDessa forma, a an√°lise de vari√¢ncia pode ser conduzida com confian√ßa, uma vez que os pressupostos de normalidade e homogeneidade foram verificados.\n\n\n**Compara√ß√µes de M√©dias**\n\n```{r}\n# Tukey no R base\nTukeyHSD(modelo)\n\n# Tukey no rstatix\ndados |> tukey_hsd(produtividade ~ tratamento)\n\n\n# M√©dias ajustadas\n# Emmeans\nemm <- emmeans(modelo, ~ tratamento)\ngrupos <- multcomp::cld(emm, Letters = letters, adjust = \"tukey\")\nprint(grupos)\n\n```\n\n\n\n------------------------------------------------------------------------\n\n### Aula 9 ‚Äì ANOVA em DBC\n\n**Anova**\n\nNo DBC (delineamento em blocos casualizados) a diferen√ßa principal √© que voc√™ precisa considerar o efeito de blocos no modelo. Seguindo o mesmo estilo da sua aula de DIC, aqui est√° a vers√£o para DBC:\n\n```{r}\n# ANOVA usando aov()\n# Aqui usamos Error(bloco) ou bloco como efeito\nmodelo <- aov(produtividade ~ tratamento + repeticao, data = dados)\nsummary(modelo)\n\n# ANOVA usando rstatix\ndados |> anova_test(produtividade ~ tratamento + repeticao)\n\n# ANOVA usando ExpDes.pt\ndbc(\n  trat = dados$tratamento,\n  bloco = dados$repeticao,\n  resp = dados$produtividade,\n  quali = TRUE,\n  mcomp = \"tukey\"\n)\n\n# ANOVA usando easyanova\n# design = 2 corresponde a DBC\neasyanova::ea1(dados, design = 2, plot = 2)\n\n```\nObserva√ß√µes importantes:\n\n- No `aov()`, o termo `+ bloco` garante que a varia√ß√£o entre blocos seja considerada.\n- No `ExpDes.pt`, usamos `dbc()` no lugar de `dic()`.\n- No `easyanova`, o argumento `design = 2` √© usado para DBC.\n\n\n\n**Testes de Pressupostos**\n\n```{r}\n# Normalidade\nshapiro.test(residuals(modelo))\n\n# Usando pacote rstatix e fazendo normalidade por grupo\ndados |> group_by(tratamento) |> rstatix::shapiro_test(produtividade)\n\n# Homogeneidade\n## Teste de Bartlett\nbartlett.test(produtividade ~ tratamento, data = dados)\n\n## Teste de Levene\nrstatix::levene_test(produtividade ~ tratamento, data = dados)\n\n## Teste de ONeill e Mathews\noneilldbc(trat = dados$tratamento, resp = dados$produtividade, bloco = dados$repeticao)\n```\n\nEm DBC tamb√©m foi realizado **Teste de O‚ÄôNeill e Mathews**, espec√≠fico para experimentos em blocos casualizados (DBC), sendo recomendado como alternativa robusta para esse delineamento.\n\n\n>Em todos os testes, valores de *p* > 0,05 indicam que n√£o h√° evid√™ncias para rejeitar a hip√≥tese de homogeneidade das vari√¢ncias, atendendo ao pressuposto da ANOVA.\n\n\n\n**Compara√ß√µes de M√©dias**\n\n```{r}\n# Tukey no R base\nTukeyHSD(modelo)\n\n# Tukey no rstatix\ndados |> tukey_hsd(produtividade ~ tratamento)\n\n\n# M√©dias ajustadas\n# Emmeans\nemm <- emmeans(modelo, ~ tratamento)\ngrupos <- multcomp::cld(emm, Letters = letters, adjust = \"tukey\")\nprint(grupos)\n\n```\n\n\n\n------------------------------------------------------------------------\n\n### Aula 12 ‚Äì ANOVA Fatorial\n\n```{r}\n# Exemplo com dois fatores\ndados2 <- expand.grid(\n  adubacao = c(\"A1\", \"A2\"),\n  cultivar = c(\"C1\", \"C2\", \"C3\"),\n  rep = 1:4\n)\nset.seed(123)\ndados2$produtividade <- rnorm(24, mean = 30, sd = 3)\n\n# ANOVA\nmodelo2 <- aov(produtividade ~ adubacao * cultivar, data = dados2)\nsummary(modelo2)\n\n# ExpDes.pt\nfat2.dic(\n  fator1 = dados2$adubacao,\n  fator2 = dados2$cultivar,\n  resp = dados2$produtividade,\n  quali = c(TRUE, TRUE),\n  mcomp = \"tukey\"\n)\n```\n\n------------------------------------------------------------------------\n\n## üîπ M√≥dulo 4 ‚Äì Regress√£o\n\n### Aula 13 ‚Äì Regress√£o Linear\n\n```{r}\ndose <- c(0, 50, 100, 150, 200)\nprod <- c(20, 28, 35, 40, 38)\ndados_reg <- data.frame(dose, prod)\n\nmodelo_reg <- lm(prod ~ dose, data = dados_reg)\na <- summary(modelo_reg)\n\n# Coeficientes\ncoeficientes <- coef(modelo_reg)\nintercepto <- round(coeficientes[1], 2) # sem sinal extra\nslope <- formatC(coeficientes[2], format = \"f\", digits = 2, flag = \"+\") # sempre com sinal\n\n# Estat√≠sticas do modelo\nr2 <- round(a$r.squared, 4)\nf_value <- a$fstatistic[1]\ndf1 <- a$fstatistic[2]\ndf2 <- a$fstatistic[3]\np_value_anova <- pf(f_value, df1, df2, lower.tail = FALSE)\n\n\n\n\n# Equa√ß√£o no formato correto\nequacao <- paste0(\"y = \", intercepto, slope, \"x\")\n\nlegenda <- paste0(\n  equacao,\n  \"  R¬≤ = \", r2,\n  \"\\nF = \", f_value,\n  \"; p = \", format.pval(p_value_anova, digits = 4, eps = 0.001)\n)\n\n\n\ndados_reg |>\n  ggplot(aes(x = dose, y = prod)) +\n  geom_point(size = 3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +\n  annotate(\"text\",\n           x = 100, y = 10,\n           label = legenda,\n           hjust = 0, size = 5) +\n  labs(x = \"Frequ√™ncia de irriga√ß√£o\", y = \"CRA (%)\") +\n  theme_bw() +\n  theme(panel.grid = element_blank()) +\n  ylim(0, 50)\n\n```\n\n------------------------------------------------------------------------\n\n### Aula 14 ‚Äì Regress√£o Quadr√°tica\n\n```{r}\n# Ajustar modelo de regress√£o quadr√°tica\nmodelo_quad <- lm(prod ~ dose + I(dose^2), data = dados_reg)\na <- summary(modelo_quad)\na\n# Coeficientes da regress√£o quadr√°tica (com mais casas decimais)\ncoef_quad <- coef(modelo_quad)\nintercepto <- formatC(coef_quad[1], format = \"f\", digits = 4)\nlinear     <- formatC(coef_quad[2], format = \"f\", digits = 4, flag = \"+\")\nquadratico <- formatC(coef_quad[3], format = \"f\", digits = 4, flag = \"+\") \n# usei 6 casas para o termo quadr√°tico porque geralmente √© bem pequeno\n\n# Estat√≠sticas do modelo\nr2 <- round(a$r.squared, 4)\nf_value <- a$fstatistic[1]\ndf1 <- a$fstatistic[2]\ndf2 <- a$fstatistic[3]\np_value_anova <- pf(f_value, df1, df2, lower.tail = FALSE)\n\n# Equa√ß√£o para legenda\nequacao <- paste0(\"y = \", intercepto, \" \", linear, \"x \", quadratico, \"x¬≤\")\nlegenda <- paste0(\n  equacao,\n  \"  R¬≤ = \", r2,\n  \"\\nF = \", round(f_value, 2),\n  \"; p = \", format.pval(p_value_anova, digits = 4, eps = 0.001)\n)\n\n# Gr√°fico\nlibrary(ggplot2)\n\nregressao_quad <- ggplot(dados_reg, aes(x = dose, y = prod)) +\n  geom_point(size = 3) +\n  stat_smooth(\n    method = \"lm\",\n    formula = y ~ x + I(x^2),\n    se = FALSE,\n    color = \"black\"\n  ) +\n  annotate(\"text\", x = 50, y = 10, label = legenda, hjust = 0, size = 5) +\n  labs(x = \"Dose\", y = \"Produ√ß√£o\") +\n  theme_bw() +\n  theme(panel.grid = element_blank()) +\n  ylim(0, 50)\n\n# Exibir gr√°fico\nregressao_quad\n\n```\n\n## üîπ M√≥dulo 5 ‚Äì Relat√≥rios e Projeto Final\n\n### Aula 15 ‚Äì Relat√≥rios com RMarkdown\n\n-   Este pr√≥prio arquivo √© um exemplo.\\\n-   Pode ser exportado em HTML, Word ou PDF.\n\n------------------------------------------------------------------------\n\n## ‚úÖ Projeto Final\n\nAnalise um conjunto de dados agr√≠colas (real ou fornecido):\\\n- Estruture os dados no Excel/CSV.\\\n- Importe para o R.\\\n- Realize ANOVA (com `aov()`, `ExpDes.pt`, `easyanova` e `rstatix`).\\\n- Teste pressupostos.\\\n- Se necess√°rio, ajuste modelos de regress√£o.\\\n- Gere gr√°ficos com `ggplot2`.\\\n- Organize os resultados em relat√≥rio RMarkdown.\n\n------------------------------------------------------------------------\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"include-in-header":[{"text":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n"}],"output-file":"codigos.html"},"language":{"toc-title-document":"√çndice","toc-title-website":"Nesta p√°gina","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Links de c√≥digo","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno de Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Baixar c√≥digo-fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Ap√™ndices","section-title-footnotes":"Notas de rodap√©","section-title-references":"Refer√™ncias","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Cita√ß√£o","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Visualizar Licen√ßa","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afilia√ß√£o","title-block-affiliation-plural":"Afilia√ß√µes","title-block-published":"Data de Publica√ß√£o","title-block-modified":"Data de Modifica√ß√£o","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"C√≥digo","code-tools-menu-caption":"C√≥digo","code-tools-show-all-code":"Mostrar o c√≥digo","code-tools-hide-all-code":"Esconder o c√≥digo","code-tools-view-source":"Ver o c√≥digo fonte","code-tools-source-code":"C√≥digo fonte","tools-share":"Compartilhar","tools-download":"Baixar","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a √°rea de transfer√™ncia","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa p√°gina","repo-action-links-source":"Ver o c√≥digo fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspond√™ncias adicionais","search-more-match-text":"mais correspond√™ncia neste documento","search-more-matches-text":"mais correspond√™ncias neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar se√ß√£o","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navega√ß√£o","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corol√°rio","crossref-prp-title":"Proposi√ß√£o","crossref-cnj-title":"Conjectura","crossref-def-title":"Defini√ß√£o","crossref-exm-title":"Exemplo","crossref-exr-title":"Exerc√≠cio","crossref-ch-prefix":"Cap√≠tulo","crossref-apx-prefix":"Ap√™ndice","crossref-sec-prefix":"Se√ß√£o","crossref-eq-prefix":"Equa√ß√£o","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprova√ß√£o","environment-remark-title":"Coment√°rio","environment-solution-title":"Solu√ß√£o","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Padr√£o","listing-page-order-by-date-asc":"Mais antigo","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Baixo para alto","listing-page-field-date":"Data","listing-page-field-title":"T√≠tulo","listing-page-field-description":"Descri√ß√£o","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Modificada","listing-page-field-subtitle":"Legenda","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0}Min","listing-page-category-all":"Todos","listing-page-no-matches":"Sem itens correspondentes","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt-BR","fig-responsive":true,"quarto-version":"1.6.42","theme":"cosmo","title":"Exemplos de C√≥digos","author":"Marlenildo Melo","date":"2025-08-21","toc_float":{"collapsed":false,"smooth_scroll":true},"toc_depth":4,"number_sections":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}